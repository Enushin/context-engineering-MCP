name: CI/CD and Package Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r context_engineering/requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

  node-tests:
    name: Node.js Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mcp-server/package-lock.json

    - name: Install dependencies
      working-directory: ./mcp-server
      run: npm ci

    - name: Run tests
      working-directory: ./mcp-server
      run: npm test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests, node-tests]

    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r context_engineering/requirements.txt
        cd mcp-server && npm ci

    - name: Create test environment
      run: |
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > .env
        echo "UVICORN_HOST=0.0.0.0" >> .env
        echo "UVICORN_PORT=8888" >> .env

    - name: Start services
      run: |
        # Start AI Guides API
        nohup python main.py &
        sleep 5

        # Start Context Engineering API
        nohup python context_engineering/context_api.py &
        sleep 5

        # Verify services are running
        curl -f http://localhost:8888/health
        curl -f http://localhost:9001/api/stats

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: context-engineering-mcp:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        pip install black isort flake8 mypy

    - name: Run Black
      run: black --check .
      continue-on-error: true

    - name: Run isort
      run: isort --check-only .
      continue-on-error: true

    - name: Run Flake8
      run: flake8 . --max-line-length=100
      continue-on-error: true

    - name: Run mypy
      run: mypy . --ignore-missing-imports
      continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  package-build:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [python-tests, node-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build, package-build, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes" > CHANGELOG.md
        git log --oneline --no-merges $(git describe --tags --abbrev=0 2>/dev/null || echo '')..HEAD >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo 'claude mcp add context-engineering -- uvx --from git+https://github.com/Enushin/context-engineering-MCP@v${{ github.run_number }} context-engineering-mcp start-mcp-server --project "$PWD"' >> CHANGELOG.md
        echo '```' >> CHANGELOG.md

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v2.0.${{ github.run_number }}
        release_name: Release v2.0.${{ github.run_number }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/context_engineering_mcp-2.0.0-py3-none-any.whl
        asset_name: context_engineering_mcp-2.0.${{ github.run_number }}-py3-none-any.whl
        asset_content_type: application/zip